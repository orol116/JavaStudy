<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- 
		servlet-context.xml 파일
		
		- DispatcherServlet (모든 요청을 받아서 Controller 찾고, 응답에 따라 View를 찾아서 연결)
		  의 설정 파일
		  
		* HandlerMapping : 요청 받은 주소애 따라 해당 주소를 처리할 컨트롤러를 연결하는 역할
		-> 기존에 XML 방식을 사용하다
		   @RequestMapping / @GetMapping / @PostMapping 으로 대체된다.
	 -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- View Resolver :
		 - Controller에서 반환된 문자열 앞/뒤에 prefix / suffix를 추가하여
		   만들어진 경로의 jsp로 요청 위임(forward)
		   
		   단, 반환된 문자열의 시작이 redirect: 구문이면 재요청(redirect) 진행
		   
		   /WEB-INF/views/member/signUp.jsp
		   
		   redirect:/
	 -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 지정된 패키지 이하에 존재하는
		 @Component, @Controller, @Service, @Repository를 찾아서 bean으로 생성해준다.	
	-->
	<context:component-scan base-package="edu.kh.comm" />
	
	<!-- interceptors : 인터셉터를 모아둔 태그 -->
	<interceptors>
		
		<!-- interceptor : 요청이 Dispatcher Servlet에서 Controller에 도달하기 전 또는 후에
						   요청/응답 객체(req, resp)를 가로채서 사용할 수 있는 객체
		 -->
		<interceptor>
		
			<!-- 가로챌 요청의 패턴을 지정 -->
			<mapping path="/**" />
			
			<!-- 인터셉터 역할을 수행한 클래스를 찾아 bean으로 등록 -->
			<beans:bean id='boardTypeInterceptor' class="edu.kh.comm.common.interceptor.BoardTypeInterceptor" />
			
		</interceptor>
		
	</interceptors>
	
	<!-- 트랜잭션 처리 시 @Transactional 어노테이션을 사용할 예정
		 
		 @Transactional : 클래스 또는 메서드 수행 후 트랜잭션 처리를 하라고 알려주는 어노테이션
		 
		 -> 해당 어노테이션을 인식하라는 설정이 필요하다.
		    -> annotation-driven
	 -->
	 <tx:annotation-driven transaction-manager="transactionManager" />
	
	
</beans:beans>
