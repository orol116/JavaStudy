package edu.kh.comm.board.controller;

import java.util.Iterator;
import java.util.Map;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;

import edu.kh.comm.board.model.service.BoardService;
import edu.kh.comm.board.model.vo.BoardDetail;
import edu.kh.comm.member.model.vo.Member;

@Controller
@RequestMapping("/board")
public class BoardController {
	
	@Autowired
	private BoardService service;

	// 게시글 목록 조회
	
	// @PathVariable("value") : URL 경로에 포함되어 있는 값을 변수로 사용할 수 있게 하는 역할
	// -> 자동으로 request scope에 등록된다. -> jsp에서 ${value}로 EL 작성가능하다.
	
	// PathVariable : 요청 자원을 식별하는 경우에 사용한다.
	
	// QueryString  : 정렬, 검색 등의 필터링 옵션에 사용한다.
	
	@GetMapping("/list/{boardCode}")
	public String boardList(@PathVariable("boardCode") int boardCode
						  , @RequestParam(value="cp", required=false, defaultValue = "1") int cp
						  , Model model) {
		
		// 게시글 목록 조회 서비스 호출
		// 1) 게시판 이름 조회 -> 인터셉터 application에 올려둔 boardTypeList 쓸 수 있을듯?
		// 2) 페이지네이션 객체 생성(listCount)
		// 3) 게시글 목록 조회
		Map<String, Object> map = service.selectBoardList(cp, boardCode);
		
		model.addAttribute("map", map);
		
		return "board/boardList";
	}
	
	// 게시글 상세조회
	@GetMapping("/detail/{boardCode}/{boardNo}")
	public String boardDetail(@PathVariable("boardCode") int boardCode
							, @PathVariable("boardNo") int boardNo
							, @RequestParam(value = "cp", required = false, defaultValue = "1") int cp
							, Model model
							, HttpSession session
							, HttpServletRequest req, HttpServletResponse resp) {
		
		// 게시글 상세조회 서비스 호출
		BoardDetail detail = service.selectBoardDetail(boardNo);
		
		// 쿠키를 이용한 조회수 중복 증가 방지 코드
		// int memberNo = loginMember.getMemberNo();
		
		// @ModelAttribute("loginMember") Member loginMember (사용불가)
		// 왜? @ModelAttribute는 별도의 required 속성이 없어서 무조건 필수!
		//     -> 세션에 loginMember가 없으면 예외 발생
		
		// 해결방법 : HttpSession을 이용
		
		
		if (detail != null) { // 상세 조회 성공 시
			
			int memberNo = 0;
			Member loginMember = (Member)session.getAttribute("loginMember");
			
			if (loginMember != null) {
				memberNo = loginMember.getMemberNo();				
			}
		
			// 글쓴이와 현재 클라이언트가 같지 않은 경우 -> 조회 수 증가
			if (detail.getMemberNo() != memberNo) {
				
				Cookie cookie = null; // 기존에 존재하던 쿠키를 저장하는 변수
				Cookie[] cArr = req.getCookies(); // 쿠키 얻어오기
				
				if (cArr != null && cArr.length > 0) { // 얻어온 쿠키가 있을 경우
					for (Cookie c : cArr) { // 얻어온 쿠키 중 이름(key)이 "readBoardNo"가 있으면 얻어오기
						if (c.getName().equals("readBoardNo")) {
							cookie = c;
						}
					}
				}
				
				int result = 0;
				
				result = service.updateReadCount(boardNo); // 조회 수 증가 서비스 호출
				
				if (result > 0) {
					detail.setReadCount(detail.getReadCount()); // 이미 조회된 데이터 DB와 동기화
					
					// 조회 증가 성공 시 게시글 번호를 누적
					//cookie = new Cookie("boardNo-" + boardNo, boardNo + "");
					
					
					cookie.setPath(req.getContextPath());
					cookie.setMaxAge(60 * 60 * 1); // 1시간
					resp.addCookie(cookie);
				}
			}
		}
		
		model.addAttribute("detail", detail);
		return "board/boardDetail";
	}
}
