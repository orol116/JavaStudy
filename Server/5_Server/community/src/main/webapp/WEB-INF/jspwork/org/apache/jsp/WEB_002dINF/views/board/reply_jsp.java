/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-05-27 06:34:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class reply_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1651196428500L));
    _jspx_dependants.put("jar:file:/E:/download/eclipse-workspace/5_Server/community/src/main/webapp/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"reply-area\">\r\n");
      out.write("\r\n");
      out.write("    <!-- 댓글 목록 -->\r\n");
      out.write("    <div class=\"reply-list-area\">\r\n");
      out.write("\r\n");
      out.write("        <ul id=\"reply-list\">\r\n");
      out.write("            <li class=\"reply-row\">\r\n");
      out.write("\r\n");
      out.write("                <p class=\"reply-writer\">\r\n");
      out.write("                    <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/images/user.png\">\r\n");
      out.write("                    <span>댓글 작성자 닉네임</span>\r\n");
      out.write("\r\n");
      out.write("                    <span class=\"reply-date\">(2022.05.27 11:07:20)</span>\r\n");
      out.write("                </p>\r\n");
      out.write("\r\n");
      out.write("                <p class=\"reply-content\">\r\n");
      out.write("                    댓글 내용입니다. <br>\r\n");
      out.write("                    이런식으로 출력 예정!\r\n");
      out.write("                </p>\r\n");
      out.write("                \r\n");
      out.write("                <div class=\"reply-btn-area\">\r\n");
      out.write("                    <button>수정</button>\r\n");
      out.write("                    <button>삭제</button>\r\n");
      out.write("                </div>\r\n");
      out.write("                <p class=\"reply-writer\">\r\n");
      out.write("                    <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/images/user.png\">\r\n");
      out.write("                    <span>댓글 작성자 닉네임</span>\r\n");
      out.write("\r\n");
      out.write("                    <span class=\"reply-date\">(2022.05.27 11:07:20)</span>\r\n");
      out.write("                </p>\r\n");
      out.write("\r\n");
      out.write("                <p class=\"reply-content\">\r\n");
      out.write("                    댓글 내용입니다. <br>\r\n");
      out.write("                    이런식으로 출력 예정!\r\n");
      out.write("                </p>\r\n");
      out.write("                \r\n");
      out.write("                <div class=\"reply-btn-area\">\r\n");
      out.write("                    <button>수정</button>\r\n");
      out.write("                    <button>삭제</button>\r\n");
      out.write("                </div>\r\n");
      out.write("                <p class=\"reply-writer\">\r\n");
      out.write("                    <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/images/user.png\">\r\n");
      out.write("                    <span>댓글 작성자 닉네임</span>\r\n");
      out.write("\r\n");
      out.write("                    <span class=\"reply-date\">(2022.05.27 11:07:20)</span>\r\n");
      out.write("                </p>\r\n");
      out.write("\r\n");
      out.write("                <p class=\"reply-content\">\r\n");
      out.write("                    댓글 내용입니다. <br>\r\n");
      out.write("                    이런식으로 출력 예정!\r\n");
      out.write("                </p>\r\n");
      out.write("                \r\n");
      out.write("                <div class=\"reply-btn-area\">\r\n");
      out.write("                    <button>수정</button>\r\n");
      out.write("                    <button>삭제</button>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("            </li>\r\n");
      out.write("        </ul>\r\n");
      out.write("    </div>\r\n");
      out.write("       \r\n");
      out.write("\r\n");
      out.write("    <!-- 댓글 작성 부분 -->\r\n");
      out.write("    <div class=\"reply-write-area\">\r\n");
      out.write("        <textarea id=\"replyContent\"></textarea>\r\n");
      out.write("        <button id=\"addReply\">\r\n");
      out.write("            댓글<br>\r\n");
      out.write("            등록\r\n");
      out.write("        </button>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
